<script>
/* Some helpful utilities */
var utils = (function() {
	function  string_ensure(value) {
		return (value || "").toString();
	}
	
	function string_trim(value) {
		return string_ensure(value).replace(/^\s+|s\+$/, "");
	}

	function string_replace(value, find, replacement) {
		return string_ensure(value).split(find).join(replacement);
	}

	function string_split(value, find, count) {
		var tokens = string_ensure(value).split(find);
		
		if (count > 0) {
			var array = array_take(tokens, count - 1);

			if (count <= tokens.length) {
				array.push(array_skip(tokens, count - 1).join(find));
			}

			return array;
		}
		
		return tokens;
	}

	function string_timehash(value, timestamp) {
		// hex output 32 bit
		function tohex(uint32) {
			return ("00000000" + uint32.toString(16)).slice(-8).toUpperCase();
		}

		var text = string_ensure(value);
		var salt = string_ensure(timestamp || Date.now());

		if (text.length == 0 || salt.length == 0){
			return "0000000000000000?0";
		}

		// align to 10
		var count = (((Math.max(text.length, salt.length) / 10 + 1) >>> 0) * 10);
		var hash  = 0
		var sum1  = 0;
		var sum2  = 0;

		for (var i = 0; i < count; ++i)
		{
			// Java String hashCode (but chr is here different)
			var chr = text.charCodeAt(i % text.length) + salt.charCodeAt(i % salt.length) + i;
			hash = ((hash << 5) - hash + chr) >>> 0;

			// checksum
			sum1 = (hash + sum1 + sum2) >>> 0;
			sum2 = (hash + sum1 + sum2) >>> 0;
		}

		return tohex(sum2) +  tohex(sum1) + "?" + salt;
	}

	string_timehash.validate = function (value, timehash, expirationSeconds) {
		var timestamp = 1 * timehash.split("?")[1];

		if (expirationSeconds) {
			if (timestamp < (Date.now() - (expirationSeconds * 1000))) {
				return false;
			}

			if (timestamp > (Date.now() + (expirationSeconds * 1000))) {
				return false;
			}
		}

		return (string_timehash(value, timestamp) == timehash);
	}

	function string_interpolate(format, params) {
		function getfield(p, v) {
			// indexer [idx]
			p = p.replace(/\[(\d+)\]/g, function(m, n) { return "." + n; });

			// indexer ['prop'], ["prop"]
			p = p.replace(/\['([^'\[\]]+)\']/g, function(m, p) { return "." + p; });
			p = p.replace(/\["([^"\[\]]+)\"]/g, function(m, p) { return "." + p; });

			// indexer [$.var], $ == params
			p = p.replace(/\[(\$\.)?([^\[\]]+)\]/g, function(m, x, p) { return "." + getfield(p, v); });

			// function
			p = p.replace(/\(\)/g, ".()");

			var track = [v, v];

			array_each(string_split(p, "."), function(prop) {
				if (!prop.length){
					return;
				}

				if (prop == "()") {
					v = v.call(track[0]);
					track = [v, v];
				} else {
					v = (v && v[prop]);
					track = [track[1], v];
				}
			});

			return v;
		}

		function formatting(fmtdsc, value) {
			if (fmtdsc && fmtdsc.length > 0) {
				var fmttok = string_split(fmtdsc, "#", 2);
				var fmtnam = fmttok[0];
				var fmtarg = fmttok[1];

				var formatter = string_interpolate.formatters[fmtdsc] || string_interpolate.formatters[fmtnam];

				if (formatter) {
					return formatter(fmtarg, value);
				}
			}

			return value;
		}

		return format.replace(/\{([^{}]+)\}/g, function(m, v) {
			var tokens = string_split(v, ":", 2);
			var result = getfield(tokens[0], params);
			var fmtdsc = tokens[1];
			
			return formatting(fmtdsc, result);
		});
	}

	// our default culture
	var culture_default = {
		aliases: ["de", "de-DE"],
		weekNames: ["Sonntag", "Montag", "Dienstag", "Mittwoch", "Donnerstag", "Freitag", "Samstag"],
		weekNamesShort: ["So", "Mo", "Di", "Mi", "Do", "Fr", "Sa"],
		monthNames: ["Januar", "Februar", "MÃ¤rz", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember"],
		monthNamesShort: ["Jan", "Feb", "Mrz", "Apr", "Mai", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Dez"],
		numberDecimalSeperator: ",",
		numberGroupSeperator: "."
	};

	// holding cultures
	string_interpolate.cultures = {};

	array_each(culture_default.aliases, function(name, key, culture) {
		string_interpolate.cultures[name] = culture;
	});

	// currently used culuture
	string_interpolate.culture = culture_default;

	// holding formatters
	string_interpolate.formatters = {};

	// some Nx formats
	array_each([0,1,2,3,4,5], function(digits) {
		string_interpolate.formatters["N" + digits] = function(format, number) {
			var culture = string_interpolate.culture || culture_default;
			var tokens  = string_split(number.toFixed(digits), ".");

			tokens[0] = string_replace(tokens[0].replace(/(\d)(?=(\d{3})+(?!\d))/g, '$1#'), "#", culture.numberGroupSeperator);
			return tokens.join(culture.numberDecimalSeperator);
		};
	});
	
	// some Fx formats
	array_each([0,1,2,3,4,5], function(digits) {
		string_interpolate.formatters["F" + digits] = function(format, number) {
			return number.toFixed(digits);
		};
	});

	// some Xx formats
	array_each([1,2,3,4,5,6,7,8], function(len) {
		string_interpolate.formatters["X" + len] = function(format, number) {
			var hex = (number >>> 0).toString(16);
			var tmp = ("00000000" + hex);
			return tmp.slice(tmp.length - len).toUpperCase();
		};
	});

	array_each([1,2,3,4,5,6,7,8], function(len) {
		string_interpolate.formatters["x" + len] = function(format, number) {
			return (string_interpolate.formatters["X" + len](format, number) || "").toLowerCase();
		};
	});

	string_interpolate.formatters["date"] = function (format, date) {
		if (!format || !date) {
			return date;
		}

		function escape(str, bag) {
			var buffer1 = [];
			var buffer2 = [];

			// reserved or masked
			str = str.replace(/(\\.)|@"/g, function(m) {
				var v = m.slice(m[0] == "\\" ? 1 : 0);
				return "@(" + (buffer1.push(v) - 1) + ")";
			});

			// strings
			str = str.replace(/'[^']*'|"[^"]*"/g, function(m) {
				var v = m.slice(1, -1);
				return "@(" + (buffer2.push(v) - 1) + ")";
			});

			bag.buffer1 = buffer1;
			bag.buffer2 = buffer2;

			return str;
		}

		function unescape(str, bag) {
			// strings
			str = str.replace(/@\((\d+)\)/g, function(m, n) {
				return bag.buffer2[n];
			})

			// reserved or masked
			str = str.replace(/@\((\d+)\)/g, function(m, n) {
				return bag.buffer1[n];
			})

			return str;
		}

		var culture = string_interpolate.culture || culture_default;
		var bag = {};

		format = escape(format, bag);
		format = format.replace(/([a-zA-Z])\1*/g, function(m) {
			switch (m) {
				// years
				case "yyyy": return ("0000" + date.getFullYear()).slice(-4);
				case "yyy":  return (function(yearString) { return ("000" + yearString).slice(-(Math.max(3, yearString.length))); }(date.getFullYear().toString()));
				case "yy":   return ("0000" + date.getFullYear()).slice(-2);
				case "y":    return ("0000" + date.getFullYear()).slice(-1);

				// months
				case "MMMM": return culture.monthNames[date.getMonth()];
				case "MMM":  return culture.monthNamesShort[date.getMonth()];
				case "MM":   return ("00" + (date.getMonth() + 1)).slice(-2);
				case "M":    return (date.getMonth() + 1);

				// days
				case "dddd": return culture.weekNames[date.getDay()];
				case "ddd":  return culture.weekNamesShort[date.getDay()];
				case "dd":   return ("00" + date.getDate()).slice(-2);
				case "d":    return date.getDate();

				// hours 24
				case "HH":   return ("00" + date.getHours()).slice(-2);
				case "H":    return date.getHours();

				// hours 12
				case "hh":   return ("00" + ((date.getHours() % 12) || 12)).slice(-2);
				case "h":    return ((date.getHours() % 12) || 12);

				// minutes
				case "mm":   return ("00" + date.getMinutes()).slice(-2);
				case "m":    return date.getMinutes();

				// seconds
				case "ss":   return ("00" + date.getSeconds()).slice(-2);
				case "s":    return date.getSeconds();

				// milliseconds
				case "fff": return (date.getMilliseconds() + "000").slice(0, 3);
				case "ff":  return (date.getMilliseconds() + "000").slice(0, 2);
				case "f":   return (date.getMilliseconds() + "000").slice(0, 1);
			}

			return m;
		});

		format = unescape(format, bag);
		return format;
	}

	function string_format(format) {
		var args = array_skip(arguments, 1);
		return string_interpolate(format, args);
	}

	// for public access, no extra export entry
	string_format.render = string_interpolate;

	function string_empty(value) {
		return (string_trim(value).length === 0);
	}

	function array_ensure(array) {
		return (Array.isArray(array) ? array : Array.prototype.slice.call(array));
	}

	function array_slice(array, begin, end) {
		return array_ensure(array).slice(begin, end);
	}

	function array_skip(array, count) {
		return array_slice(array, Math.max(0, count));
	}

	function array_take(array, count) {
		return array_slice(array, 0, Math.max(0, count));
	}
	
	function array_props(array, callback) {
		for (var key in array) {
			if (callback(array[key], key, array) === false) {
				return;
			}
		}
	}

	function array_each(array, callback) {
		array_props(array_ensure(array), callback);
	}

	function array_select(array, callback) {
		return array_ensure(array).map(callback);
	}

	// TODO: rename, traverse ...?
	function dom_findParent(node, predicate) {
		var parent = node.parentNode;

		while (parent) {
			if (predicate(parent)) {
				return parent;
			}

			parent = parent.parentNode;
		}
	}

	function dom_select(node, selector) {
		return node.querySelectorAll(selector);
	}

	function dom_setText(node, value) {
		node.innerText = value;
	}

	function dom_getText(node) {
		return (node.innerText || node.textContent);
	}

	function dom_setHtml(node, html) {
		node.innerHTML = html;
	}

	function dom_getHtml(node) {
		return node.innerHTML;
	}

	function dom_show(node) {
		node.style.display = "block";
		node.style.visibility = "visible";
	}

	function dom_hide(node) {
		node.style.display = "none";
		node.style.visibility = "hidden";
	}

	function _async(callback, delay, resolve, reject) {
		var id = setTimeout(function() {
			id = 0;

			try {
				var result = callback();
				(resolve && resolve(result));
			} catch (error) {
				console.error(error);
				(reject && reject(error));
			}
		}, delay || 0);

		return {
			abort: function() {
				(id && (id = clearTimeout(id)));
			}
		};
	}

	// note: no states
	function promise(executor) {
		var queue = [];

		function isThenable(value) {
			return (typeof(value) === "object" && (typeof(value["then"]) === "function"));
		}

		// value is result from resolve or error from reject
		function handle(value, method) {
			// check the value is thenable or not
			if (isThenable(value)) {
				// attach
				value.then(function(result) { resolve(result); }, function(error) { reject(error); });
				return;
			}

			var next;

			// move to next error or success handler
			while ((next = queue.shift())) {
				if (next[method]) {
					_async(function() { return next[method](value); }, 0, function(result) { resolve(result); }, function(error) { reject(error); });
					return;
				}
			}
		}

		function resolve(result) {
			handle(result, "success");
		}

		function reject(error) {
			handle(error, "failure");
		}

		//todo: if (isThenable(executor)) then ...

		(function run() {
			// promise is running now, we have to ensure that only resolve or reject would be called, and only one time
			var _triggered = false;
			var _resolve   = function(result) { (!_triggered && (_triggered = true) && resolve(result)); };
			var _reject    = function(error)  { (!_triggered && (_triggered = true) &&   reject(error)); };

			_async(function() { return executor(_resolve, _reject); }, 0, null, _reject);
		}());

		var p = {
			"then": function(success, failure) {
				queue.push({ success: success, failure: failure });
				return p;
			},
			"catch": function(failure) {
				queue.push({ success: null, failure: failure });
				return p;
			},
			"finally": function(callback) {
				return p.then(
					function(result) { return promise.resolve(callback()).then(function() { return result; });},
					function(error)  { return promise.resolve(callback()).then(function() { throw error;   });}
				);
			}
		};

		return p;


	promise.resolve = function(value) {
		return promise(function(resolve, reject) {
			resolve(value);
		});
	};

	promise.reject = function(value) {
		return promise(function(resolve, reject) {
			reject(value);
		});
	};

	// non-standard
	promise.unwrap = function(value) {
		return promise(function(resolve, reject) {
			try {
				if (typeof(value) === "function") {
					resolve(promise.unwrap(value()));
				}
				else {
					resolve(value);
				}
			}
			catch (error) {
				reject(error);
			};
		});
	};

	function ajax(settings) {
		return promise(function(resolve, reject) {
			var options = settings.options || {};
			var xhr = new XMLHttpRequest();
			var url = settings.url;

			xhr.open(settings.verb, url, true);
			xhr.timeout = (options.timeout || 0);
			xhr.withCredentials = (options.withCredentials === true);
			xhr.responseType = options.responseType;

			if (options.mimeType) {
				// IE11+ (not IE10 document mode)
				// useful if the server sends "text/html" but you need "text/html; charset=utf-8".
				// Edge, Firefox will interpret also a BOM, if available (note: if the server dont send the correct mime-type header).
				// meta tags (charset or content-type) from the document are not success for IE/Edge, Firefox yes.
				// should be used with { responseType: "document" } to get xhr.responseXML.
				// in order you have these options (supported or not):
				// 1. overrideMimeType, 2. response header (mime-type), 3. document BOM, 4. meta tags (charset, content-type)
				(xhr.overrideMimeType && xhr.overrideMimeType(options.mimeType));
			}

			array_props(options.headers, function(value, key) {
				xhr.setRequestHeader(key, value);
			});

			xhr.onprogress = function(event) {
				(event.lengthComputable && options.onprogress && options.onprogress({ settings: settings, loaded: event.loaded, total: event.total, percent: (event.loaded / event.total * 100) >>> 0 }));
			}

			xhr.onload = xhr.onerror = xhr.onabort = xhr.ontimeout = function(event) {
				xhr.onload = xhr.onerror = xhr.onabort = xhr.ontimeout = xhr.onprogress = null;

				if (xhr.readyState == 4 && xhr.status >= 200 && xhr.status < 300) {
					resolve({ settings: settings, xhr: xhr });
				}
				else {
					reject({ settings: settings, xhr: xhr });
				}
			};

			xhr.send(options.data);
		});
	}

	// some shortcuts
	array_each(["GET", "POST", "PUT", "DELETE", "HEAD", "OPTIONS", "PATCH"], function(verb) {
		ajax[verb.toLowerCase()] = function(url, options) { return ajax({ verb: verb, url: url, options: options }); };
	});

	// see ID.js, unique enough in most cases
	function make_id() { 
		return "_" + Math.random().toString(36).substr(2, 9);
	};

	var api = {
		_async: _async,
		promise: promise,
		ajax: ajax,
		id: make_id,
		string: {
			ensure: string_ensure,
			trim: string_trim,
			replace: string_replace,
			split: string_split,
			timehash: string_timehash,
			format: string_format,
			empty: string_empty
		},
		array: {
			ensure: array_ensure,
			slice: array_slice,
			skip: array_skip,
			take: array_take,
			props: array_props,
			each: array_each,
			select: array_select
		},
		dom: {
			findParent: dom_findParent,
			select: dom_select,
			setText: dom_setText,
			getText: dom_getText,
			setHtml: dom_setHtml,
			getHtml: dom_getHtml,
			show: dom_show,
			hide: dom_hide
		}
	};

	return api;
}());
</script>
